#include<iostream>
using namespace std;

struct Node
{
    int data;
    Node* left;
    Node* right;
    Node(int v) : data(v), left(NULL), right(NULL) {}
};

class Tree {
private:
    Node* current, * temp, * root, * parent;
public:
    Tree() : current(NULL), temp(NULL), root(NULL), parent(NULL) {}

    void insertion(int v) {
        if (root == NULL) {
            root = new Node(v);
        }
        else {
            parent = current = root;
            while (current != NULL) {
                if (current->data == v) {
                    cout << "Value Already Exist:" << endl;
                    return;
                }
                else if (v < current->data) {
                    parent = current;
                    current = current->left;
                }
                else {
                    parent = current;
                    current = current->right;
                }
            }

            if (v < parent->data) {
                temp = new Node(v);
                parent->left = temp;
            }
            else {
                temp = new Node(v);
                parent->right = temp;
            }
        }
    }

    void printInorder(Node* node) {
        if (node == NULL)
            return;

        printInorder(node->left);
        cout << node->data << " ";
        printInorder(node->right);
    }

    void print() {
        cout << "Inorder Traversal:" << endl;
        printInorder(root);
        cout << endl;
    }
};

int main() {
    Tree tree;
    
    // Insert values into the BST
    tree.insertion(5);
    tree.insertion(3);
    tree.insertion(7);
    tree.insertion(2);
    tree.insertion(4);
    tree.insertion(6);
    tree.insertion(8);

    // Print the BST in inorder traversal
    tree.print();

    return 0;
}
